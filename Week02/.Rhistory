library(sf)
forests <- st_read("../data/forest.shp")
getwd()
forests <- st_read("../data/forests.shp")
plot(forests)
playground <- st_read("../data/playground.shp")
playground <- st_read("../data/playgrounds.shp")
playground <- st_read("../data/playgrounds4326.shp")
playgrounds <- st_read("../data/playgrounds4326.shp")
parks <- st_read("../data/parks.shp")
View(playground)
shelters <- st_read("../data/shelters.json")
?head
head(forests)
## Global options
options(max.print="75")
opts_chunk$set(echo=FALSE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
library(knitr)
library(rmdformats)
## Global options
options(max.print="75")
opts_chunk$set(echo=FALSE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
options(scipen=999)
# Load the sf package
library(sf)
# Read in the forests shapefile
forests <- st_read("../data/forests.shp")
parks <- st_read("../data/parks.shp")
playgrounds <- st_read("../data/playgrounds4326.shp")
shelters <- st_read("../data/shelters.json")
head(forests)
clear
cls
head(shelters)
str(forests)
show(forests)
open(forests)
View(forests)
View(forests)
View(parks)
# Load the sf package
library(tidyverse)
library(dplyr)
library(sf)
?filter
View(parks)
large_parks_only <- filter(parks, areal_m2 > 50000)
?nrow
nrow(large_parks_only)
nrow(parks)
nrow(large_parks_only)
?select
# Use filter() to limit to over5ha parks
over5_lim <- %>% select(navn, areal_m2)
# Use filter() to limit to over5ha parks
over5_lim <- %>% select(large_parks_only, c(navn, areal_2))
# Use filter() to limit to over5ha parks
over5_lim <- large_parks_only %>% select(navn, areal_m2)
View(over5_lim)
# Use head() to look at the first few records
head(over5_lim)
# Create a standard, non-spatial data frame with one column
df <- data.frame(a = 1:3)
# Add a list column to your data frame
df$b <- list(1:4, 1:5, 1:10)
# Look at your data frame with head
head(df)
# Convert your data frame to a tibble and print on console
as.tibble(df)
# Convert your data frame to a tibble and print on console
as_tibble(df)
# Pull out the third observation from both columns individually
df$a[2]
# Pull out the third observation from both columns individually
df$a[3]
# Convert your data frame to a tibble and print on console
as_tibble(df)
df$b[3]
# Compute the areas of the forests
areas <- st_area(forests)
# Create a quick histogram of the areas using hist
hist(areas)
# Filter to forests greater than 200000 (square meters)
big_forests <- forests %>% filter(unclass(areas) > 200000)
?unclass
# Can you plot the big_forests with their names??(hint: check the plotting section in Task 5 below)
plot(big_forests, col = "green")
# Plot just the geometry of big_forests
plot(st_geometry(big_forests))
show(big_forests)
# Can you plot the big_forests with their names??(hint: check the plotting section in Task 5 below)
plot(big_forests["name"])
View(big_forests)
View(big_forests)
# Can you plot the big_forests with their names??(hint: check the plotting section in Task 5 below)
plot(big_forests["navn"])
# Plot the forests object using all defaults
plot(forests)
# Plot just the areal_m2 attribute of the forests data
plot(forests[areal_m2])
# Plot just the areal_m2 attribute of the forests data
plot(forests["areal_m2"])
# Create a new object of just the forests geometry
forests_geo <- st_geometry(forests)
# Plot the geometry of the forests data
plot(forests_geo)
# Plot the geometry of the forests and the parks object together
plot(forests_geo, col = "green");plot(parks$geometry, col = "blue", add = TRUE)
# Load the raster package
library(raster)
?raster
# Read in the mound elevation single-band raster
elevation <- raster("DNK_msk_alt.grd")
# Read in the mound elevation single-band raster
elevation <- raster("../data/DNK_msk_alt.grd")
?brick
# Read in the orthophoto image multi-band raster
aarhus <- brick(elevation)
# Read in the orthophoto image multi-band raster
aarhus <- brick("../data/Aarhus_1m.TIF")
# Get the class for the new objects
class(elevation)
class(aarhus)
?nlayers
# Identify how many layers each object has
nlayers(elevation)
nlayers(aarhus)
elevation
str(elevation)
# Get the extent of the elevation and aarhus object
extent(elevation)
# Get the extent of the elevation and aarhus object
extent(elevation, aarhus)
extent(aarhus)
# Get the extent of the elevation and aarhus object
extent(elevation)
extent(aarhus)
# Get the CRS of the aarhus and elevation object
crs(elevation)
crs(aarhus)
# Determine the number of grid cells in both raster objects
ncell(aarhus)
ncell(elevation)
# Plot the elevation raster (single raster)
plot(elevation)
# Plot the aarhus raster (as a single image for each layer)
plot(aarhus)
# Plot the aarhus raster as an image
plotRGB(aarhus)
# Plot the aarhus raster as an image
plotRGB(aarhus, stretch = "lin")
# Determine the CRS for the elevation and playgrounds vector objects
st_crs(forests)
st_crs(playgrounds)
st_crs(playgrounds) <- crs_1
# Assign the CRS to playgrounds
crs_1 <- 4326
st_crs(playgrounds) <- crs_1
# Determine the CRS for the aarhus and elevation rasters
crs(aarhus)
crs(elevation)
# Determine the CRS for the aarhus and elevation rasters
crs(aarhus)
# Write here the proj4string for the aarhus layer
crs_2 <- "+proj=utm +zone=32 +ellps=GRS80 +units=m +no_defs"
# Get the CRS from the aarhus object
the_crs <- crs(aarhus, asText = TRUE)
the_crs
# Project playgrounds to match the CRS of aarhus
playgrounds_crs <- st_transform(playgrounds, crs = the_crs)
# Get the CRS from the aarhus object
the_crs <- crs(aarhus, asText = TRUE)
# Project playgrounds to match the CRS of aarhus
playgrounds_crs <- st_transform(playgrounds, crs = the_crs)
# Project elevation to match the CRS of aarhus
elevation_crs <- projectRaster(elevation, crs = the_crs, method = "ngb")
# Look at the CRS to see if they match
st_crs(playgrounds_crs)
crs(elevation_crs)
# Plot aarhus and playgrounds (run both lines together)
# Do you see the playgrounds?
plot(aarhus, stretch = "lin")
plot(aarhus, stretch = "lin")
plot(playgrounds, add = TRUE)
# Plot aarhus and playgrounds (run both lines together)
# Do you see the playgrounds?
plotRGB(aarhus, stretch = "lin")
# Plot aarhus and playgrounds (run both lines together)
# Do you see the playgrounds?
plotRGB(aarhus, stretch = "lin")
plotRGB(aarhus, stretch = "lin")
plot(playgrounds, add = TRUE)
plotRGB(aarhus, stretch = "lin", alpha = 100)
plot(playgrounds, col = "green", lwd = 3, add = TRUE)
crs(aarhus)
st_crs(playgrounsd)
st_crs(playgrounds)
crs(aarhus)
crs(aarhus)
the_crs <- crs(aarhus, asText = TRUE)
playgrounds_crs <- st_transform(playgrounds, crs = the_crs)
st_crs(playgrounds_crs)
plotRGB(aarhus, stretch = "lin", alpha = 100)
plot(playgrounds_crs, col = "green", lwd = 3, add = TRUE)
# Simply run the tmap code
library(tmap)
?tmap
??tmap
# Simply run the tmap code
install.packages("tmap")
library(tmap)
tm_shape(aarhus) +
tm_rgb() +
tm_shape(parks) +
tm_polygons(col = "green") +
tm_shape(playgrounds_crs) +
tm_dots(col = "yellow",
size = 1)
library(raster)
getData("ISO3")
elevation <- getData("alt", country = "DNK", mask = TRUE)
municipalities <- getData("GADM", country = "DNK", level = 2)
DK_border <- getData("GADM", country = "DNK", level = 0)
plot(elevation)
plot(municipalities))
plot(municipalities)
plot(DK_border)
