library(knitr)
library(rmdformats)
## Global options
options(max.print="75")
opts_chunk$set(echo=TRUE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
library(raster)
library(raster)
library(sf)
df <- data.frame(place = c("Aarhus Domkirke",
"Christianskirken",
"Nobelparken"),
longitude=c(10.2102364,10.1949197,10.2033485),
latitude=c(56.1574919,56.1772228,56.174346))
# Convert the data frame to an sf object
df_sf <- st_as_sf(df, coords = c("longitude", "latitude"), crs=4326)
# Transform the points to match the shelters' CRS EPSG 25832
df_crs <- st_transform(df_sf, crs = 25832)
# Buffer the points
df_buf <- st_buffer(df_crs, dist = 500)
# Load shelters and buffer them by 500m
shelters <- st_read("../data/shelters.json")
shelters_buf <- st_buffer(shelters, dist = 500)
# Load the aarhus image
aarhus_img <- brick("../data/Aarhus_1m.TIF")
# Plot the shelters and buffers, aarhus image and points and their buffers
plot(st_geometry(shelters_buf), col = "green")
plot(st_geometry(shelters), pch = 2 ,add = TRUE)
plotRGB(aarhus_img, stretch = "lin",add = TRUE)
plot(st_geometry(shelters_buf), col = "green")
plot(st_geometry(shelters), pch = 2 ,add = TRUE)
plotRGB(aarhus_img, stretch = "lin",add = TRUE)
plot(st_geometry(df_buf), col = "firebrick",add = TRUE)
plot(st_geometry(df_crs), pch = 16, add = TRUE)
municipalities <- getData("GADM", country = "DNK", level = 2)
# Convert municipalities to sf object and project to epsg 25832
municipalities_25832 <- municipalities %>%
st_as_sf() %>%
st_transform(crs=25832)
# Compute the municipality centroids
centroids <- st_centroid(municipalities_25832)
# Plot the municipality geometry
plot(st_geometry(municipalities_25832), col = "grey", border = "white")
plot(centroids, pch = 16, col = "firebrick", add = TRUE)
municipalities_25832
shelters
?all.equal
# Buffer the shelters by 500m after projecting the object to crs
# same crs
all.equal(shelters,municipalities_25832)
sh_buffer <- shelters %>%
# project to Aarhus municipality CRS if different
st_buffer(crs = 25832) %>%
st_buffer(dist = 500)
sh_buffer <- shelters %>%
# project to Aarhus municipality CRS if different
st_geometry(crs = 25832) %>%
st_buffer(shelters, dist = 500))
sh_buffer <- shelters %>%
# project to Aarhus municipality CRS if different
st_geometry(crs = 25832) %>%
st_buffer(shelters, dist = 500)
?st_geometry
shelter_buffer <- shelters %>%
st_buffer(dist = 500)
sh_buffer <- st_geometry(shelter_buffer)
View(sh_buffer)
sh_buffer <- shelters %>%
st_buffer(dist = 500)
# Limit the object to just geometry
sh_buffers <- st_geometry(sh_buffer)
# Compute the number of features in sh_buffer
length(sh_buffers)
# Plot the shelter buffers
plot(sh_buffers)
?sh_buf_union
# Dissolve the buffers
sh_buf_union <- sh_buf_union(sh_buffers)
# Dissolve the buffers
sh_buf_union <- st_union(sh_buffers)
# Compute the number of features in sh_buf_union
length(sh_buf_union)
# Plot the dissolved buffers
plot(sh_buf_union)
# Look at the data frame to see the type of geometry
head(shelters)
# Convert the points to a single multi-point
sh1 <- st_union(shelters)
# Look at the data frame to see the type of geometry
head(sh1)
# Confirm that we went from 17 features to 1 feature
length(shelters)
length(sh1)
# Compute the tight bounding box
shelters_hull <- st_convex_hull(sh1)
plot(shelters_hull, col = "red")
plot(sh1, add = TRUE)
library(knitr)
library(rmdformats)
library(tidyverse)
library(sf)
## Global options
options(max.print="75")
opts_chunk$set(echo=TRUE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
# Load the monuments into R
monuments <- read_sf("04_fortidsminder/anlaeg_all_25832.shp")
rm(list = ls())
library(knitr)
library(rmdformats)
library(rmdformats)
library(tidyverse)
library(sf)
# Load the monuments into R
monuments <- read_sf("04_fortidsminder/anlaeg_all_25832.shp")
View(monuments)
# Check the periodisation and type of the monuments
dplyr::filter(monuments$datering)
# Check the periodisation and type of the monuments
filter(monuments$datering)
# Check the periodisation and type of the monuments
head(monuments$datering)
head(monuments$anlaegsbet)
# Check the periodisation and type of the monuments
show(monuments$datering)
# Check the periodisation and type of the monuments
head(monuments$datering)
View(monuments)
# Filter Viking-era finds
viking <- monuments %>%
dplyr::filter(datering == 'Vikingtid')
# Filter Viking-era finds
viking <- monuments %>%
dplyr::filter(datering == 'Vikingtid')
# Prepare municipalities
library(_______)
View(viking)
head(monuments)
head(monuments$datering)
unique(monuments$datering)
# Filter Viking-era finds
viking <- monuments %>%
dplyr::filter(datering == 'Vikingetid')
# Prepare municipalities
library(raster)
municipalities <-  getData("GADM", country = "DNK", level = 2)
municipalities_25832 <- municipalities %>%
st_as_sf(25832)
municipalities_25832 <- municipalities %>%
st_as_sf(25832) %>%
st_transform(25832)
plot(st_geometry(municipalities_25832))
plot(viking, add = TRUE, pch = 16, col = "red")
View(viking)
plot(st_geometry(viking), add = TRUE, pch = 16, col = "red")
plot(st_geometry(municipalities_25832))
plot(st_geometry(viking), add = TRUE, pch = 16, col = "red")
plot(st_geometry(municipalities_25832))
plot(st_geometry(viking), add = TRUE, pch = 8, col = "red")
plot(st_geometry(municipalities_25832))
plot(st_geometry(viking), add = TRUE, pch = 12, col = "red")
plot(st_geometry(municipalities_25832))
plot(st_geometry(viking), add = TRUE, pch = 16, col = "red")
# Determine whether viking monuments has class data.frame
class(viking)
class(municipalities_25832)
# Join the viking monuments with the municipalities
viking_neigh <- st_join(viking, municipalities_25832)
# Confirm that viking_neigh has the municipality information
head(viking_neigh)
viking_neigh
View(municipalities_25832)
View(viking_neigh)
View(viking_neigh)
?group_by
?tally
?arrange
# Calculate the count of monuments per municipality
viking_neigh %>%
group_by(NAME_2) %>%
tally() %>%
arrange(desc(n))
View(viking_neigh)
least <- viking_neigh %>%
group_by(NAME_2) %>%
tally() %>%
arrange(n) %>%
slice(1:5)
least
arrange(desc(n) %>%
most
most <- viking_neigh %>%
most <- viking_neigh %>%
most
most <- viking_neigh %>%
group_by(NAME_2) %>%
tally() %>%
arrange(desc(n) %>%
slice(1:5)
`mostattributes<-`()
most <- viking_neigh %>%
group_by(NAME_2) %>%
tally() %>%
arrange(desc(n) %>%
slice(1:5)
most_viking <- viking_neigh %>%
most_viking <- viking_neigh %>%
group_by(NAME_2) %>%
tally() %>%
arrange(desc(n) %>%
slice(1:5)
most_viking <- viking_neigh %>%
most_viking <- viking_neigh %>%
group_by(NAME_2) %>%
tally() %>%
arrange(desc(n)) %>%
slice(1:5)
most_viking
# Plot the municipalities with fewest Viking finds in red over DK municipalities
plot(least, col = "grey", border = "white")
# Plot the municipalities with fewest Viking finds in red over DK municipalities
plot(least$n, col = "grey", border = "white")
?st_intersects
plot(municipalities_25832[st_intersects(viking_neight(least, municipalities_25832, sparse = FALSE)), ]$geometry, col = "red", add = T)
plot(municipalities_25832[st_intersects(viking_neigh(least, municipalities_25832, sparse = FALSE)), ]$geometry, col = "red", add = T)
plot(municipalities_25832[st_intersects(st_geometry(least, municipalities_25832, sparse = FALSE)), ]$geometry, col = "red", add = T)
plot(municipalities_25832[st_intersects(st_geometry(least, municipalities_25832, sparse = FALSE))]$geometry, col = "red", add = T)
plot(least, col = "grey", border = "white")
plot(municipalities_25832[st_intersects(st_join(least, municipalities_25832, sparse = FALSE))]$geometry, col = "red", add = T)
viking
# Load objects
parks <- read_sf("../data/parks.shp")
viking
