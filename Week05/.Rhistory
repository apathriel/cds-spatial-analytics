library(knitr)
library(rmdformats)
## Global options
options(max.print="75")
opts_chunk$set(echo=TRUE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
# Install & load geosphere
# install.packages("geosphere")
library("geosphere")
# Create spatial data matrix
my_points <- matrix(c(10.212030, 151.215256,56.158150, -33.856159), nrow = 2)
rownames(my_points) <- c("Aarhus University", "Sydney Opera")
colnames(my_points) <- c("longitude", "latitude")
# Check the object
my_points
# Calculate a Haversine distance
distHaversine(my_points)  # result is in meters
?distHaversine()
# Calculate Meeus distance
distMeeus(my_points)
# Calculate Law of Cosines distance
distCosine(my_points)
# Calculate Law of Cosines distance
distCosine(my_points)
# Calculate a Haversine distance
distHaversine(my_points)  # result is in meters
distRhumb(my_points)
# Calculate Vincenty sphere distance
distVincentySphere(my_points)
# Calculate Vincenty ellipsoid distance
distVincentyEllipsoid(my_points)
gc_dist <- distHaversine(my_points)
rl_dist <- distRhumb(my_points)
(rl_dist-gc_dist)/gc_dist*100
# Calculate percent difference
gc_dist/1000
(rl_dist-gc_dist)/gc_dist*100
# load libraries
library(sf)
# load libraries
library(sf)
library(tidyverse)
View(my_points)
# prepare data as a simple feature
points <- data.frame(names =c("Aarhus University", "Sydney Opera"),
longitude = c(10.212030,151.215256),
latitude = c(56.158150,-33.856159))
View(points)
# create geographic simple feature
points_4326 <- points %>%
st_as_sf(coords = c("longitude", "latitude"), crs = 4326)
View(points_4326)
3
# create a planimetric simple feature
points_32632 <- points %>%
st_as_sf(coords = c("longitude", "latitude"), crs = 4326) %>%
st_transform(32632)
# calculate the Euclidian distance
euc_dist <- st_distance(points[1,], points[2,])
# calculate the Euclidian distance
euc_dist <- st_distance(points_4326[1,], points_4326[2,])
euc_dist
# calculate geodetic distance
geo_dist <- st_distance(points_32632[1,],points_32632[2,])
geo_dist
# difference
euc_dist-geo_dist
(eu_dist-geo_dist)/geo_dist*100
(euc_dist-geo_dist)/geo_dist*100
library(knitr)
library(rmdformats)
## Global options
options(max.print="75")
opts_chunk$set(echo=TRUE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
install.packages("Rcpp")
install.packages("fasterize")
install.packages("mapboxapi", dependencies = TRUE)
library(knitr)
library(rmdformats)
## Global options
options(max.print="75")
opts_chunk$set(echo=TRUE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
# either paste it in directly, or in a txt file that you store locally and "ignore"
my_token <- "pk.eyJ1IjoiYXBhdGhyaWVsIiwiYSI6ImNsdG5sNjYybzA3bDcycnA4bDh4cHZkOG4ifQ.lslHySslLZ241pLIWH8B4A"
nobel_iso_drive <- mb_isochrone(nobel,
profile = "driving",
time = c(4, 8, 12))
library(leaflet)
library(mapboxapi)
mapbox_map <- leaflet() %>%
addMapboxTiles(style_id = "streets-v11",
username = "mapbox")
# either paste it in directly, or in a txt file that you store locally and "ignore"
my_token <- "pk.eyJ1IjoiYXBhdGhyaWVsIiwiYSI6ImNsdG5sNjYybzA3bDcycnA4bDh4cHZkOG4ifQ.lslHySslLZ241pLIWH8B4A"
my_token <- read_file("mytoken.txt")
# either paste it in directly, or in a txt file that you store locally and "ignore"
my_token <- "pk.eyJ1IjoiYXBhdGhyaWVsIiwiYSI6ImNsdG5sNjYybzA3bDcycnA4bDh4cHZkOG4ifQ.lslHySslLZ241pLIWH8B4A"
library(mapboxapi)
mb_access_token(my_token, install = TRUE, overwrite = TRUE)
# restart R to set the token!
library(knitr)
library(rmdformats)
## Global options
options(max.print="75")
opts_chunk$set(echo=TRUE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
library(leaflet)
library(mapboxapi)
mapbox_map <- leaflet() %>%
addMapboxTiles(style_id = "streets-v11",
username = "mapbox")
mapbox_map
nobel <- mb_geocode("Nobelparken, Jens Chr.Skous Vej 5, Aarhus, 8000, Denmark ")
nobel
mapbox_map %>%
setView(lng = nobel[1],
lat = nobel[2],
zoom = 14)
nobel_iso_drive <- mb_isochrone(nobel,
profile = "driving",
time = c(4, 8, 12))
nobel_iso_drive
colors <- viridisLite::viridis(3)
# You can set your own colors, too
# library(RColorBrewer)
# colors <- c('#fc8d59','#ffffbf','#91bfdb')
leaflet() %>%
addMapboxTiles(style_id = "outdoors-v11",
username = "mapbox") %>%
addPolygons(data =nobel_iso_drive,
color = rev(colors),
fillColor = rev(colors),
fillOpacity = 0.5,
opacity = 0.5,
weight = 0.2) %>%
addLegend(labels = c(4, 8, 12),
colors = colors,
title = "Drive-time<br/>around Nobel")
route <- mb_directions(origin = nobel,
destination = "Moesgaard Museum, Aarhus, Denmark",
profile = "cycling")
route
mapbox_map %>%
addPolylines(data = route,
popup = paste0(
"Distance (km): ",
round(route$distance, 1),
"<br/>Time (minutes): ",
round(route$duration, 1)
))
route_dir <- mb_directions(origin = nobel,
destination = "Moesgaard Museum, Aarhus, Denmark",
profile = "cycling",
steps = TRUE)
route_dir
library(mapboxapi)
isos <- mb_isochrone(
location = " Palle Juul-Jensens Blvd. 161, 8200 Aarhus",
profile = "driving",
time = 1:45
)
library(sf)
isos <- read_sf("../data/isos4326.shp")
pal <- colorNumeric("viridis", isos$time, na.color = "transparent")
mapbox_map %>%
addPolygons(data = isos,
fillColor = ~pal(time),
stroke = FALSE,
fillOpacity = 0.1) %>%
addLegend(values = isos$time,
pal = pal,
title = "Drive-time to Skejby hospital")
library(Rcpp)
library(fasterize)
install.packages(fasterize)
# If running this the first time, uncomment these lines
install.packages("Rcpp")
install.packages("fasterize")
install.packages("Rcpp")
install.packages("mapboxapi", dependencies = TRUE)
install.packages("mapboxapi", dependencies = TRUE)
library(knitr)
library(rmdformats)
## Global options
options(max.print="75")
opts_chunk$set(echo=TRUE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
# Install & load geosphere
# install.packages("geosphere")
library("geosphere")
# Create spatial data matrix
my_points <- matrix(c(10.212030, 151.215256,56.158150, -33.856159), nrow = 2)
rownames(my_points) <- c("Aarhus University", "Sydney Opera")
colnames(my_points) <- c("longitude", "latitude")
# Check the object
my_points
# Calculate a Haversine distance
distHaversine(my_points)  # result is in meters
?distHaversine()
# Calculate Law of Cosines distance
distCosine(my_points)
# Calculate Meeus distance
distMeeus(my_points)
distRhumb(my_points)
# Calculate Vincenty sphere distance
distVincentySphere(my_points)
# Calculate Vincenty ellipsoid distance
distVincentyEllipsoid(my_points)
gc_dist <- distHaversine(my_points)
rl_dist <- distRhumb(my_points)
(rl_dist-gc_dist)/gc_dist*100
# Calculate percent difference
gc_dist/1000
(rl_dist-gc_dist)/gc_dist*100
# load libraries
library(sf)
library(tidyverse)
# prepare data as a simple feature
points <- data.frame(names =c("Aarhus University", "Sydney Opera"),
longitude = c(10.212030,151.215256),
latitude = c(56.158150,-33.856159))
points
# create geographic simple feature
points_4326 <- points %>%
st_as_sf(coords = c("longitude", "latitude"), crs = 4326)
# create a planimetric simple feature
points_32632 <- points %>%
st_as_sf(coords = c("longitude", "latitude"), crs = 4326) %>%
st_transform(32632)
points_4326
points_32632
# calculate the Euclidian distance
euc_dist <- st_distance(points_4326[1,], points_4326[2,])
# calculate geodetic distance
geo_dist <- st_distance(points_32632[1,],points_32632[2,])
euc_dist
geo_dist
# difference
euc_dist-geo_dist
(euc_dist-geo_dist)/geo_dist*100
# calculate the Euclidian distance
euc_dist <- st_distance(points_32632[1,], points_32632[2,])
euc_dist
# calculate geodetic distance
geo_dist <- st_distance(points_4326[1,],points_4326[2,])
geo_disty
geo_dist
# difference
euc_dist-geo_dist
(euc_dist-geo_dist)/geo_dist*100
# Load the viking dataset
viking_aarhus <- readRDS("../data/viking.rds")
